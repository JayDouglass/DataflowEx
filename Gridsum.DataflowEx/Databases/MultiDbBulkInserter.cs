using System;
using System.Collections.Concurrent;
using System.Threading.Tasks;
using System.Threading.Tasks.Dataflow;

namespace Gridsum.DataflowEx.Databases
{
    /// <summary>
    /// The class helps you to bulk insert parsed objects to multiple database tables (e.g. group by profileId)
    /// </summary>
    /// <typeparam name="T">The db-mapped type of parsed objects (usually generated by EF/linq2sql)</typeparam>
    public class MultiDbBulkInserter<T> : DataDispatcher<T, int> where T:class
    {
        private Func<int, string> m_connectionGetter;
        private string m_destTable;
        private readonly string m_destLabel;
        private DataflowOptions m_options;
        private int m_bulkSize;
        private readonly string m_displayName;
        private readonly PostBulkInsertDelegate<T> m_postBulkInsert;

        /// <summary>
        /// Constructs a MultiDbBulkInserter instance.
        /// </summary>
        /// <param name="options">The option for this dataflow</param>
        /// <param name="dispatchFunc">The dispatch function to decide which child flow the incoming objects will be delivered to</param>
        /// <param name="connectionGetter">Connection string generator for child flows</param>
        /// <param name="destTable">The table name in database to bulk insert into for every child</param>
        /// <param name="destLabel">The mapping label to help choose among all column mappings</param>
        /// <param name="bulkSize">The bulk size to insert in a batch. Default to 8192.</param>
        /// <param name="displayName">A given name of this multi bulk inserter (would be nice for logging)</param>
        /// <param name="postBulkInsert">A delegate that enables you to inject some customized work whenever a bulk insert is done</param>
        public MultiDbBulkInserter(DataflowOptions options, 
            Func<T, int> dispatchFunc, 
            Func<int, string> connectionGetter, 
            string destTable, 
            string destLabel, 
            int bulkSize = 4096 * 2, 
            string displayName = null,
            PostBulkInsertDelegate<T> postBulkInsert = null)
            : base(dispatchFunc, options)
        {
            m_options = options;
            m_connectionGetter = connectionGetter;
            m_destTable = destTable;
            m_destLabel = destLabel;
            m_bulkSize = bulkSize;
            m_displayName = displayName;
            this.m_postBulkInsert = postBulkInsert;
        }

        protected override Dataflow<T> CreateChildFlow(int dispatchKey)
        {
            return new DbBulkInserter<T>(
                this.m_connectionGetter(dispatchKey),
                this.m_destTable,
                this.m_options,
                this.m_destLabel,
                this.m_bulkSize,
                string.Format("childDbBulkInserter_{0}", dispatchKey),
                this.m_postBulkInsert);
        }
        
        /// <summary>
        /// See <see cref="Dataflow{T}.Name"/>
        /// </summary>
        public override string Name
        {
            get
            {
                return m_displayName ?? base.Name;
            }
        }
    }
}
